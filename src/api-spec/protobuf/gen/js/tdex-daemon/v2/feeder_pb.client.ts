/* eslint-disable */
// @generated by protobuf-ts 2.8.2 with parameter add_pb_suffix,eslint_disable,ts_nocheck,keep_enum_prefix,long_type_number
// @generated from protobuf file "tdex-daemon/v2/feeder.proto" (package "tdex_daemon.v2", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { FeederService } from "./feeder_pb";
import type { ListSupportedPriceSourcesResponse } from "./feeder_pb";
import type { ListSupportedPriceSourcesRequest } from "./feeder_pb";
import type { ListPriceFeedsResponse } from "./feeder_pb";
import type { ListPriceFeedsRequest } from "./feeder_pb";
import type { GetPriceFeedResponse } from "./feeder_pb";
import type { GetPriceFeedRequest } from "./feeder_pb";
import type { RemovePriceFeedResponse } from "./feeder_pb";
import type { RemovePriceFeedRequest } from "./feeder_pb";
import type { UpdatePriceFeedResponse } from "./feeder_pb";
import type { UpdatePriceFeedRequest } from "./feeder_pb";
import type { StopPriceFeedResponse } from "./feeder_pb";
import type { StopPriceFeedRequest } from "./feeder_pb";
import type { StartPriceFeedResponse } from "./feeder_pb";
import type { StartPriceFeedRequest } from "./feeder_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { AddPriceFeedResponse } from "./feeder_pb";
import type { AddPriceFeedRequest } from "./feeder_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * FeederService is the service to manage price feeds
 *
 * @generated from protobuf service tdex_daemon.v2.FeederService
 */
export interface IFeederServiceClient {
    /**
     * AddPriceFeed creates a new price feed for the given market.
     *
     * @generated from protobuf rpc: AddPriceFeed(tdex_daemon.v2.AddPriceFeedRequest) returns (tdex_daemon.v2.AddPriceFeedResponse);
     */
    addPriceFeed(input: AddPriceFeedRequest, options?: RpcOptions): UnaryCall<AddPriceFeedRequest, AddPriceFeedResponse>;
    /**
     * StartPriceFeed starts the price feed with the given id.
     *
     * @generated from protobuf rpc: StartPriceFeed(tdex_daemon.v2.StartPriceFeedRequest) returns (tdex_daemon.v2.StartPriceFeedResponse);
     */
    startPriceFeed(input: StartPriceFeedRequest, options?: RpcOptions): UnaryCall<StartPriceFeedRequest, StartPriceFeedResponse>;
    /**
     * StopPriceFeed stops the price feed with the given id.
     *
     * @generated from protobuf rpc: StopPriceFeed(tdex_daemon.v2.StopPriceFeedRequest) returns (tdex_daemon.v2.StopPriceFeedResponse);
     */
    stopPriceFeed(input: StopPriceFeedRequest, options?: RpcOptions): UnaryCall<StopPriceFeedRequest, StopPriceFeedResponse>;
    /**
     * UpdatePriceFeed allows to change source and/or ticker of the given price feed.
     *
     * @generated from protobuf rpc: UpdatePriceFeed(tdex_daemon.v2.UpdatePriceFeedRequest) returns (tdex_daemon.v2.UpdatePriceFeedResponse);
     */
    updatePriceFeed(input: UpdatePriceFeedRequest, options?: RpcOptions): UnaryCall<UpdatePriceFeedRequest, UpdatePriceFeedResponse>;
    /**
     * RemovePriceFeed removes the price feed with the given id.
     *
     * @generated from protobuf rpc: RemovePriceFeed(tdex_daemon.v2.RemovePriceFeedRequest) returns (tdex_daemon.v2.RemovePriceFeedResponse);
     */
    removePriceFeed(input: RemovePriceFeedRequest, options?: RpcOptions): UnaryCall<RemovePriceFeedRequest, RemovePriceFeedResponse>;
    /**
     * GetPriceFeed returns the price feed for the given market.
     *
     * @generated from protobuf rpc: GetPriceFeed(tdex_daemon.v2.GetPriceFeedRequest) returns (tdex_daemon.v2.GetPriceFeedResponse);
     */
    getPriceFeed(input: GetPriceFeedRequest, options?: RpcOptions): UnaryCall<GetPriceFeedRequest, GetPriceFeedResponse>;
    /**
     * ListPriceFeeds returns the list of price feeds of all markets.
     *
     * @generated from protobuf rpc: ListPriceFeeds(tdex_daemon.v2.ListPriceFeedsRequest) returns (tdex_daemon.v2.ListPriceFeedsResponse);
     */
    listPriceFeeds(input: ListPriceFeedsRequest, options?: RpcOptions): UnaryCall<ListPriceFeedsRequest, ListPriceFeedsResponse>;
    /**
     * ListSupportedPriceSources returns the list of supported price sources.
     *
     * @generated from protobuf rpc: ListSupportedPriceSources(tdex_daemon.v2.ListSupportedPriceSourcesRequest) returns (tdex_daemon.v2.ListSupportedPriceSourcesResponse);
     */
    listSupportedPriceSources(input: ListSupportedPriceSourcesRequest, options?: RpcOptions): UnaryCall<ListSupportedPriceSourcesRequest, ListSupportedPriceSourcesResponse>;
}
/**
 * FeederService is the service to manage price feeds
 *
 * @generated from protobuf service tdex_daemon.v2.FeederService
 */
export class FeederServiceClient implements IFeederServiceClient, ServiceInfo {
    typeName = FeederService.typeName;
    methods = FeederService.methods;
    options = FeederService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * AddPriceFeed creates a new price feed for the given market.
     *
     * @generated from protobuf rpc: AddPriceFeed(tdex_daemon.v2.AddPriceFeedRequest) returns (tdex_daemon.v2.AddPriceFeedResponse);
     */
    addPriceFeed(input: AddPriceFeedRequest, options?: RpcOptions): UnaryCall<AddPriceFeedRequest, AddPriceFeedResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddPriceFeedRequest, AddPriceFeedResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * StartPriceFeed starts the price feed with the given id.
     *
     * @generated from protobuf rpc: StartPriceFeed(tdex_daemon.v2.StartPriceFeedRequest) returns (tdex_daemon.v2.StartPriceFeedResponse);
     */
    startPriceFeed(input: StartPriceFeedRequest, options?: RpcOptions): UnaryCall<StartPriceFeedRequest, StartPriceFeedResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartPriceFeedRequest, StartPriceFeedResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * StopPriceFeed stops the price feed with the given id.
     *
     * @generated from protobuf rpc: StopPriceFeed(tdex_daemon.v2.StopPriceFeedRequest) returns (tdex_daemon.v2.StopPriceFeedResponse);
     */
    stopPriceFeed(input: StopPriceFeedRequest, options?: RpcOptions): UnaryCall<StopPriceFeedRequest, StopPriceFeedResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<StopPriceFeedRequest, StopPriceFeedResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * UpdatePriceFeed allows to change source and/or ticker of the given price feed.
     *
     * @generated from protobuf rpc: UpdatePriceFeed(tdex_daemon.v2.UpdatePriceFeedRequest) returns (tdex_daemon.v2.UpdatePriceFeedResponse);
     */
    updatePriceFeed(input: UpdatePriceFeedRequest, options?: RpcOptions): UnaryCall<UpdatePriceFeedRequest, UpdatePriceFeedResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdatePriceFeedRequest, UpdatePriceFeedResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * RemovePriceFeed removes the price feed with the given id.
     *
     * @generated from protobuf rpc: RemovePriceFeed(tdex_daemon.v2.RemovePriceFeedRequest) returns (tdex_daemon.v2.RemovePriceFeedResponse);
     */
    removePriceFeed(input: RemovePriceFeedRequest, options?: RpcOptions): UnaryCall<RemovePriceFeedRequest, RemovePriceFeedResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<RemovePriceFeedRequest, RemovePriceFeedResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetPriceFeed returns the price feed for the given market.
     *
     * @generated from protobuf rpc: GetPriceFeed(tdex_daemon.v2.GetPriceFeedRequest) returns (tdex_daemon.v2.GetPriceFeedResponse);
     */
    getPriceFeed(input: GetPriceFeedRequest, options?: RpcOptions): UnaryCall<GetPriceFeedRequest, GetPriceFeedResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPriceFeedRequest, GetPriceFeedResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ListPriceFeeds returns the list of price feeds of all markets.
     *
     * @generated from protobuf rpc: ListPriceFeeds(tdex_daemon.v2.ListPriceFeedsRequest) returns (tdex_daemon.v2.ListPriceFeedsResponse);
     */
    listPriceFeeds(input: ListPriceFeedsRequest, options?: RpcOptions): UnaryCall<ListPriceFeedsRequest, ListPriceFeedsResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListPriceFeedsRequest, ListPriceFeedsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ListSupportedPriceSources returns the list of supported price sources.
     *
     * @generated from protobuf rpc: ListSupportedPriceSources(tdex_daemon.v2.ListSupportedPriceSourcesRequest) returns (tdex_daemon.v2.ListSupportedPriceSourcesResponse);
     */
    listSupportedPriceSources(input: ListSupportedPriceSourcesRequest, options?: RpcOptions): UnaryCall<ListSupportedPriceSourcesRequest, ListSupportedPriceSourcesResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListSupportedPriceSourcesRequest, ListSupportedPriceSourcesResponse>("unary", this._transport, method, opt, input);
    }
}
