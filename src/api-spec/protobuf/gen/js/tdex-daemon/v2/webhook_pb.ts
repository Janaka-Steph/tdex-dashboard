/* eslint-disable */
// @generated by protobuf-ts 2.9.0 with parameter add_pb_suffix,eslint_disable,ts_nocheck,keep_enum_prefix,long_type_number
// @generated from protobuf file "tdex-daemon/v2/webhook.proto" (package "tdex_daemon.v2", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { WebhookInfo } from "./types_pb";
import { WebhookEvent } from "./types_pb";
/**
 * @generated from protobuf message tdex_daemon.v2.AddWebhookRequest
 */
export interface AddWebhookRequest {
    /**
     * The endpoint of the webhook to call whenever the target event occurs.
     *
     * @generated from protobuf field: string endpoint = 1;
     */
    endpoint: string;
    /**
     * The event for which the webhook endpoint should be called.
     *
     * @generated from protobuf field: tdex_daemon.v2.WebhookEvent event = 2;
     */
    event: WebhookEvent;
    /**
     * The secret to use to generate an OAuth token for making authenticated
     * requests to the webhook endpoint.
     *
     * @generated from protobuf field: string secret = 3;
     */
    secret: string;
}
/**
 * @generated from protobuf message tdex_daemon.v2.AddWebhookResponse
 */
export interface AddWebhookResponse {
    /**
     * The id of the new webhook.
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message tdex_daemon.v2.RemoveWebhookRequest
 */
export interface RemoveWebhookRequest {
    /**
     * The id of the webhook to remove.
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message tdex_daemon.v2.RemoveWebhookResponse
 */
export interface RemoveWebhookResponse {
}
/**
 * @generated from protobuf message tdex_daemon.v2.ListWebhooksRequest
 */
export interface ListWebhooksRequest {
    /**
     * Filter the list of webhooks by event.
     *
     * @generated from protobuf field: tdex_daemon.v2.WebhookEvent event = 1;
     */
    event: WebhookEvent;
}
/**
 * @generated from protobuf message tdex_daemon.v2.ListWebhooksResponse
 */
export interface ListWebhooksResponse {
    /**
     * The list of info about the webhooks.
     *
     * @generated from protobuf field: repeated tdex_daemon.v2.WebhookInfo webhook_info = 1;
     */
    webhookInfo: WebhookInfo[];
}
// @generated message type with reflection information, may provide speed optimized methods
class AddWebhookRequest$Type extends MessageType<AddWebhookRequest> {
    constructor() {
        super("tdex_daemon.v2.AddWebhookRequest", [
            { no: 1, name: "endpoint", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "event", kind: "enum", T: () => ["tdex_daemon.v2.WebhookEvent", WebhookEvent] },
            { no: 3, name: "secret", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddWebhookRequest>): AddWebhookRequest {
        const message = { endpoint: "", event: 0, secret: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddWebhookRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddWebhookRequest): AddWebhookRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string endpoint */ 1:
                    message.endpoint = reader.string();
                    break;
                case /* tdex_daemon.v2.WebhookEvent event */ 2:
                    message.event = reader.int32();
                    break;
                case /* string secret */ 3:
                    message.secret = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddWebhookRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string endpoint = 1; */
        if (message.endpoint !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.endpoint);
        /* tdex_daemon.v2.WebhookEvent event = 2; */
        if (message.event !== 0)
            writer.tag(2, WireType.Varint).int32(message.event);
        /* string secret = 3; */
        if (message.secret !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.secret);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v2.AddWebhookRequest
 */
export const AddWebhookRequest = new AddWebhookRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddWebhookResponse$Type extends MessageType<AddWebhookResponse> {
    constructor() {
        super("tdex_daemon.v2.AddWebhookResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddWebhookResponse>): AddWebhookResponse {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddWebhookResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddWebhookResponse): AddWebhookResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddWebhookResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v2.AddWebhookResponse
 */
export const AddWebhookResponse = new AddWebhookResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveWebhookRequest$Type extends MessageType<RemoveWebhookRequest> {
    constructor() {
        super("tdex_daemon.v2.RemoveWebhookRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveWebhookRequest>): RemoveWebhookRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RemoveWebhookRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveWebhookRequest): RemoveWebhookRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveWebhookRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v2.RemoveWebhookRequest
 */
export const RemoveWebhookRequest = new RemoveWebhookRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveWebhookResponse$Type extends MessageType<RemoveWebhookResponse> {
    constructor() {
        super("tdex_daemon.v2.RemoveWebhookResponse", []);
    }
    create(value?: PartialMessage<RemoveWebhookResponse>): RemoveWebhookResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RemoveWebhookResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveWebhookResponse): RemoveWebhookResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RemoveWebhookResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v2.RemoveWebhookResponse
 */
export const RemoveWebhookResponse = new RemoveWebhookResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListWebhooksRequest$Type extends MessageType<ListWebhooksRequest> {
    constructor() {
        super("tdex_daemon.v2.ListWebhooksRequest", [
            { no: 1, name: "event", kind: "enum", T: () => ["tdex_daemon.v2.WebhookEvent", WebhookEvent] }
        ]);
    }
    create(value?: PartialMessage<ListWebhooksRequest>): ListWebhooksRequest {
        const message = { event: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListWebhooksRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListWebhooksRequest): ListWebhooksRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tdex_daemon.v2.WebhookEvent event */ 1:
                    message.event = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListWebhooksRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tdex_daemon.v2.WebhookEvent event = 1; */
        if (message.event !== 0)
            writer.tag(1, WireType.Varint).int32(message.event);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v2.ListWebhooksRequest
 */
export const ListWebhooksRequest = new ListWebhooksRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListWebhooksResponse$Type extends MessageType<ListWebhooksResponse> {
    constructor() {
        super("tdex_daemon.v2.ListWebhooksResponse", [
            { no: 1, name: "webhook_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WebhookInfo }
        ]);
    }
    create(value?: PartialMessage<ListWebhooksResponse>): ListWebhooksResponse {
        const message = { webhookInfo: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListWebhooksResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListWebhooksResponse): ListWebhooksResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated tdex_daemon.v2.WebhookInfo webhook_info */ 1:
                    message.webhookInfo.push(WebhookInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListWebhooksResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated tdex_daemon.v2.WebhookInfo webhook_info = 1; */
        for (let i = 0; i < message.webhookInfo.length; i++)
            WebhookInfo.internalBinaryWrite(message.webhookInfo[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v2.ListWebhooksResponse
 */
export const ListWebhooksResponse = new ListWebhooksResponse$Type();
/**
 * @generated ServiceType for protobuf service tdex_daemon.v2.WebhookService
 */
export const WebhookService = new ServiceType("tdex_daemon.v2.WebhookService", [
    { name: "AddWebhook", options: {}, I: AddWebhookRequest, O: AddWebhookResponse },
    { name: "RemoveWebhook", options: {}, I: RemoveWebhookRequest, O: RemoveWebhookResponse },
    { name: "ListWebhooks", options: {}, I: ListWebhooksRequest, O: ListWebhooksResponse }
]);
